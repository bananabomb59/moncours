<?php

namespace EDiff\Bundle\AdminBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * Classe_Eleve_AnneeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Classe_Eleve_AnneeRepository extends EntityRepository
{
	public function getAvecEleves($page, $nb_per_page, $classe, $annee)
    {
        $qb = $this->createQueryBuilder('e');

        // On fait une jointure sur la table des tags, avec pour alias « t ».
        $qb ->join('e.user', 'u')
        	->where("u.droits = 'eleve'");

        if($classe != -1) {
        	$qb->andWhere('e.classe = :classe')
        	   ->setParameter('classe', $classe);
        }
        
    	if($annee != -1) {
        	$qb->andWhere('e.annee = :annee')
        	   ->setParameter('annee', $annee);
        }
        	
        $qb->groupBy('u.id');
        
        $qb	->setFirstResult($page)
    		->setMaxResults($nb_per_page);
        	

        // $qb->join('e.user', 'u', 'WITH', 'YEAR(c.date) > 2011');
        
        // Enfin, on retourne le résultat.
        return $qb->getQuery()
                   ->getResult();
    }
    
	public function getAllEleves($classe, $annee)
    {
        $qb = $this->createQueryBuilder('e');

        // On fait une jointure sur la table des tags, avec pour alias « t ».
        $qb ->join('e.user', 'u')
        	->where("u.droits = 'eleve'");
        
    	if($classe != -1) {
        	$qb->andWhere('e.classe = :classe')
        	   ->setParameter('classe', $classe);
        }
        
    	if($annee != -1) {
        	$qb->andWhere('e.annee = :annee')
        	   ->setParameter('annee', $annee);
        }	
        	
        $qb->groupBy('u.id');
        
        // Enfin, on retourne le résultat.
        return $qb->getQuery()
                   ->getResult();
    }
    
	public function getAvecReponses($classe, $annee)
    {
        $qb = $this->createQueryBuilder('e');

        // On fait une jointure sur la table des tags, avec pour alias « t ».
        $qb ->join('e.user', 'u')
        	->where("u.droits = 'eleve'");
        
    	if($classe != -1) {
        	$qb->andWhere('e.classe = :classe')
        	   ->setParameter('classe', $classe);
        }
        
    	if($annee != -1) {
        	$qb->andWhere('e.annee = :annee')
        	   ->setParameter('annee', $annee);
        }	
        
        $qb->groupBy('u.id');
        	
        // Enfin, on retourne le résultat.
        return $qb->getQuery()
                   ->getResult();
    }
}